
GENESIS2PCE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000566  0000061a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000566  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800102  00800102  0000061c  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000061f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000650  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000068  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a16  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000821  00000000  00000000  0000110e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000081d  00000000  00000000  0000192f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d8  00000000  00000000  0000214c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004c0  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000298  00000000  00000000  000026e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  0000297c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 29 02 	call	0x452	; 0x452 <main>
  9e:	0c 94 b1 02 	jmp	0x562	; 0x562 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setPCE>:
/*
	Sets PCE buttons according to current pad mode
*/
void setPCE()
{
	bitWrite(PORTD, PC_PIN_I, bitRead(state, STATE_C));
  a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  aa:	87 ff       	sbrs	r24, 7
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <setPCE+0xc>
  ae:	5d 9a       	sbi	0x0b, 5	; 11
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <setPCE+0xe>
  b2:	5d 98       	cbi	0x0b, 5	; 11
	bitWrite(PORTD, PC_PIN_II, bitRead(state, STATE_B));
  b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  b8:	86 ff       	sbrs	r24, 6
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <setPCE+0x1a>
  bc:	5c 9a       	sbi	0x0b, 4	; 11
  be:	01 c0       	rjmp	.+2      	; 0xc2 <setPCE+0x1c>
  c0:	5c 98       	cbi	0x0b, 4	; 11
	bitWrite(PORTD, PC_PIN_LEFT, bitRead(state, STATE_LEFT));
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  c6:	82 ff       	sbrs	r24, 2
  c8:	02 c0       	rjmp	.+4      	; 0xce <setPCE+0x28>
  ca:	5e 9a       	sbi	0x0b, 6	; 11
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <setPCE+0x2a>
  ce:	5e 98       	cbi	0x0b, 6	; 11
	bitWrite(PORTB, PC_PIN_RIGHT, bitRead(state, STATE_RIGHT));
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  d4:	83 ff       	sbrs	r24, 3
  d6:	02 c0       	rjmp	.+4      	; 0xdc <setPCE+0x36>
  d8:	2b 9a       	sbi	0x05, 3	; 5
  da:	01 c0       	rjmp	.+2      	; 0xde <setPCE+0x38>
  dc:	2b 98       	cbi	0x05, 3	; 5
	bitWrite(PORTB, PC_PIN_SELECT, bitRead(state, STATE_START));
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e2:	84 ff       	sbrs	r24, 4
  e4:	02 c0       	rjmp	.+4      	; 0xea <setPCE+0x44>
  e6:	28 9a       	sbi	0x05, 0	; 5
  e8:	01 c0       	rjmp	.+2      	; 0xec <setPCE+0x46>
  ea:	28 98       	cbi	0x05, 0	; 5
	bitWrite(PORTB, PC_PIN_UP, bitRead(state, STATE_UP));
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  f0:	80 ff       	sbrs	r24, 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <setPCE+0x52>
  f4:	29 9a       	sbi	0x05, 1	; 5
  f6:	01 c0       	rjmp	.+2      	; 0xfa <setPCE+0x54>
  f8:	29 98       	cbi	0x05, 1	; 5
	bitWrite(PORTB, PC_PIN_DOWN, bitRead(state, STATE_DOWN));
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  fe:	81 ff       	sbrs	r24, 1
 100:	02 c0       	rjmp	.+4      	; 0x106 <setPCE+0x60>
 102:	2a 9a       	sbi	0x05, 2	; 5
 104:	01 c0       	rjmp	.+2      	; 0x108 <setPCE+0x62>
 106:	2a 98       	cbi	0x05, 2	; 5
	if(sixButtonMode)
 108:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 10c:	88 23       	and	r24, r24
 10e:	61 f1       	breq	.+88     	; 0x168 <setPCE+0xc2>
	{
		bitWrite(PORTD, PC_PIN_RUN, bitRead(state, STATE_MODE));
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 114:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 118:	93 ff       	sbrs	r25, 3
 11a:	02 c0       	rjmp	.+4      	; 0x120 <setPCE+0x7a>
 11c:	5f 9a       	sbi	0x0b, 7	; 11
 11e:	01 c0       	rjmp	.+2      	; 0x122 <setPCE+0x7c>
 120:	5f 98       	cbi	0x0b, 7	; 11
		bitWrite(PORTD, PC_PIN_III, bitRead(state, STATE_A));
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 126:	85 ff       	sbrs	r24, 5
 128:	02 c0       	rjmp	.+4      	; 0x12e <setPCE+0x88>
 12a:	5b 9a       	sbi	0x0b, 3	; 11
 12c:	01 c0       	rjmp	.+2      	; 0x130 <setPCE+0x8a>
 12e:	5b 98       	cbi	0x0b, 3	; 11
		bitWrite(PORTD, PC_PIN_IV, bitRead(state, STATE_X));
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 134:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 138:	90 ff       	sbrs	r25, 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <setPCE+0x9a>
 13c:	5a 9a       	sbi	0x0b, 2	; 11
 13e:	01 c0       	rjmp	.+2      	; 0x142 <setPCE+0x9c>
 140:	5a 98       	cbi	0x0b, 2	; 11
		bitWrite(PORTD, PC_PIN_V, bitRead(state, STATE_Y));
 142:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 146:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 14a:	91 ff       	sbrs	r25, 1
 14c:	02 c0       	rjmp	.+4      	; 0x152 <setPCE+0xac>
 14e:	59 9a       	sbi	0x0b, 1	; 11
 150:	01 c0       	rjmp	.+2      	; 0x154 <setPCE+0xae>
 152:	59 98       	cbi	0x0b, 1	; 11
		bitWrite(PORTD, PC_PIN_VI, bitRead(state, STATE_Z));
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 158:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15c:	92 ff       	sbrs	r25, 2
 15e:	02 c0       	rjmp	.+4      	; 0x164 <setPCE+0xbe>
 160:	58 9a       	sbi	0x0b, 0	; 11
 162:	08 95       	ret
 164:	58 98       	cbi	0x0b, 0	; 11
 166:	08 95       	ret
	}
	else
	{
		bitWrite(PORTD, PC_PIN_RUN, bitRead(state, STATE_A));
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 16c:	85 ff       	sbrs	r24, 5
 16e:	02 c0       	rjmp	.+4      	; 0x174 <setPCE+0xce>
 170:	5f 9a       	sbi	0x0b, 7	; 11
 172:	01 c0       	rjmp	.+2      	; 0x176 <setPCE+0xd0>
 174:	5f 98       	cbi	0x0b, 7	; 11
		bitWrite(PORTD, PC_PIN_III, 1);
 176:	5b 9a       	sbi	0x0b, 3	; 11
		bitWrite(PORTD, PC_PIN_IV, 1);
 178:	5a 9a       	sbi	0x0b, 2	; 11
		bitWrite(PORTD, PC_PIN_V, 1);
 17a:	59 9a       	sbi	0x0b, 1	; 11
		bitWrite(PORTD, PC_PIN_VI, 1);
 17c:	58 9a       	sbi	0x0b, 0	; 11
 17e:	08 95       	ret

00000180 <doReadCycle>:
/*
	Performs a single read cycle for the Genesis Pad
*/
bool doReadCycle(uint8_t cycle)
{
	bitWrite(PORTC, GEN_7, cycle % 2);
 180:	80 ff       	sbrs	r24, 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <doReadCycle+0x8>
 184:	40 9a       	sbi	0x08, 0	; 8
 186:	01 c0       	rjmp	.+2      	; 0x18a <doReadCycle+0xa>
 188:	40 98       	cbi	0x08, 0	; 8
	switch(cycle)
 18a:	84 30       	cpi	r24, 0x04	; 4
 18c:	09 f4       	brne	.+2      	; 0x190 <doReadCycle+0x10>
 18e:	d0 c0       	rjmp	.+416    	; 0x330 <doReadCycle+0x1b0>
 190:	30 f4       	brcc	.+12     	; 0x19e <doReadCycle+0x1e>
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	59 f0       	breq	.+22     	; 0x1ac <doReadCycle+0x2c>
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	09 f4       	brne	.+2      	; 0x19c <doReadCycle+0x1c>
 19a:	49 c0       	rjmp	.+146    	; 0x22e <doReadCycle+0xae>
 19c:	4c c1       	rjmp	.+664    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 19e:	85 30       	cpi	r24, 0x05	; 5
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <doReadCycle+0x24>
 1a2:	d8 c0       	rjmp	.+432    	; 0x354 <doReadCycle+0x1d4>
 1a4:	88 30       	cpi	r24, 0x08	; 8
 1a6:	09 f4       	brne	.+2      	; 0x1aa <doReadCycle+0x2a>
 1a8:	3a c1       	rjmp	.+628    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 1aa:	45 c1       	rjmp	.+650    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	{
		case 2:
		if((GEN_3 | GEN_4) == 0)
 1ac:	96 b1       	in	r25, 0x06	; 6
 1ae:	86 b1       	in	r24, 0x06	; 6
 1b0:	96 95       	lsr	r25
 1b2:	96 95       	lsr	r25
 1b4:	96 95       	lsr	r25
 1b6:	86 95       	lsr	r24
 1b8:	86 95       	lsr	r24
 1ba:	89 2b       	or	r24, r25
 1bc:	80 fd       	sbrc	r24, 0
 1be:	2d c0       	rjmp	.+90     	; 0x21a <doReadCycle+0x9a>
		{
			bitWrite(state, STATE_A, GEN_6);
 1c0:	31 9b       	sbis	0x06, 1	; 6
 1c2:	0a c0       	rjmp	.+20     	; 0x1d8 <doReadCycle+0x58>
 1c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1cc:	80 62       	ori	r24, 0x20	; 32
 1ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1d6:	09 c0       	rjmp	.+18     	; 0x1ea <doReadCycle+0x6a>
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1e0:	8f 7d       	andi	r24, 0xDF	; 223
 1e2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			bitWrite(state, STATE_START, GEN_9);
 1ea:	1d 9b       	sbis	0x03, 5	; 3
 1ec:	0b c0       	rjmp	.+22     	; 0x204 <doReadCycle+0x84>
 1ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1f6:	80 61       	ori	r24, 0x10	; 16
 1f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
		case 8:
		lastReadTime = millis();
		break;
	}
	return true;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	08 95       	ret
	{
		case 2:
		if((GEN_3 | GEN_4) == 0)
		{
			bitWrite(state, STATE_A, GEN_6);
			bitWrite(state, STATE_START, GEN_9);
 204:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 208:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20c:	8f 7e       	andi	r24, 0xEF	; 239
 20e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 212:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
		case 8:
		lastReadTime = millis();
		break;
	}
	return true;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	08 95       	ret
			bitWrite(state, STATE_A, GEN_6);
			bitWrite(state, STATE_START, GEN_9);
		}
		else
		{
			state = 0b1111111111111111;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	9f ef       	ldi	r25, 0xFF	; 255
 21e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 222:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			sixButtonMode = false;
 226:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			return false;
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	08 95       	ret
		}
		break;
		case 3:
		bitWrite(state, STATE_UP, GEN_1);
 22e:	35 9b       	sbis	0x06, 5	; 6
 230:	0a c0       	rjmp	.+20     	; 0x246 <doReadCycle+0xc6>
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 236:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 240:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 244:	09 c0       	rjmp	.+18     	; 0x258 <doReadCycle+0xd8>
 246:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 24a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 24e:	8e 7f       	andi	r24, 0xFE	; 254
 250:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 254:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		bitWrite(state, STATE_DOWN, GEN_2);
 258:	34 9b       	sbis	0x06, 4	; 6
 25a:	0a c0       	rjmp	.+20     	; 0x270 <doReadCycle+0xf0>
 25c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 260:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 264:	82 60       	ori	r24, 0x02	; 2
 266:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 26a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 26e:	09 c0       	rjmp	.+18     	; 0x282 <doReadCycle+0x102>
 270:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 274:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 278:	8d 7f       	andi	r24, 0xFD	; 253
 27a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 27e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		bitWrite(state, STATE_LEFT, GEN_3);
 282:	33 9b       	sbis	0x06, 3	; 6
 284:	0a c0       	rjmp	.+20     	; 0x29a <doReadCycle+0x11a>
 286:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 28a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 28e:	84 60       	ori	r24, 0x04	; 4
 290:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 294:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 298:	09 c0       	rjmp	.+18     	; 0x2ac <doReadCycle+0x12c>
 29a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 29e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2a2:	8b 7f       	andi	r24, 0xFB	; 251
 2a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		bitWrite(state, STATE_RIGHT, GEN_4);
 2ac:	32 9b       	sbis	0x06, 2	; 6
 2ae:	0a c0       	rjmp	.+20     	; 0x2c4 <doReadCycle+0x144>
 2b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2b8:	88 60       	ori	r24, 0x08	; 8
 2ba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2c2:	09 c0       	rjmp	.+18     	; 0x2d6 <doReadCycle+0x156>
 2c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2cc:	87 7f       	andi	r24, 0xF7	; 247
 2ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		bitWrite(state, STATE_B, GEN_6);
 2d6:	31 9b       	sbis	0x06, 1	; 6
 2d8:	0a c0       	rjmp	.+20     	; 0x2ee <doReadCycle+0x16e>
 2da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2e2:	80 64       	ori	r24, 0x40	; 64
 2e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2ec:	09 c0       	rjmp	.+18     	; 0x300 <doReadCycle+0x180>
 2ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2f6:	8f 7b       	andi	r24, 0xBF	; 191
 2f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		bitWrite(state, STATE_C, GEN_9);
 300:	1d 9b       	sbis	0x03, 5	; 3
 302:	0b c0       	rjmp	.+22     	; 0x31a <doReadCycle+0x19a>
 304:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 308:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 30c:	80 68       	ori	r24, 0x80	; 128
 30e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 312:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
		case 8:
		lastReadTime = millis();
		break;
	}
	return true;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	08 95       	ret
		bitWrite(state, STATE_UP, GEN_1);
		bitWrite(state, STATE_DOWN, GEN_2);
		bitWrite(state, STATE_LEFT, GEN_3);
		bitWrite(state, STATE_RIGHT, GEN_4);
		bitWrite(state, STATE_B, GEN_6);
		bitWrite(state, STATE_C, GEN_9);
 31a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 31e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 322:	8f 77       	andi	r24, 0x7F	; 127
 324:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 328:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
		case 8:
		lastReadTime = millis();
		break;
	}
	return true;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 330:	85 e0       	ldi	r24, 0x05	; 5
 332:	8a 95       	dec	r24
 334:	f1 f7       	brne	.-4      	; 0x332 <doReadCycle+0x1b2>
 336:	00 00       	nop
		bitWrite(state, STATE_B, GEN_6);
		bitWrite(state, STATE_C, GEN_9);
		break;
		case 4:
		_delay_us(1); // MCU is reading the controller too fast. Unless we wait a microsecond we do not get the correct information about the six button mode
		sixButtonMode = GEN_1 == 0 && GEN_2 == 0;
 338:	35 99       	sbic	0x06, 5	; 6
 33a:	06 c0       	rjmp	.+12     	; 0x348 <doReadCycle+0x1c8>
 33c:	86 b1       	in	r24, 0x06	; 6
 33e:	82 95       	swap	r24
 340:	81 70       	andi	r24, 0x01	; 1
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	89 27       	eor	r24, r25
 346:	01 c0       	rjmp	.+2      	; 0x34a <doReadCycle+0x1ca>
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	81 70       	andi	r24, 0x01	; 1
 34c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		break;
		case 8:
		lastReadTime = millis();
		break;
	}
	return true;
 350:	81 e0       	ldi	r24, 0x01	; 1
		bitWrite(state, STATE_C, GEN_9);
		break;
		case 4:
		_delay_us(1); // MCU is reading the controller too fast. Unless we wait a microsecond we do not get the correct information about the six button mode
		sixButtonMode = GEN_1 == 0 && GEN_2 == 0;
		break;
 352:	08 95       	ret
		case 5:
		if(sixButtonMode)
 354:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 358:	88 23       	and	r24, r24
 35a:	09 f4       	brne	.+2      	; 0x35e <doReadCycle+0x1de>
 35c:	55 c0       	rjmp	.+170    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		{
			bitWrite(state, STATE_Z, GEN_1);
 35e:	35 9b       	sbis	0x06, 5	; 6
 360:	0a c0       	rjmp	.+20     	; 0x376 <doReadCycle+0x1f6>
 362:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 366:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 36a:	34 60       	ori	r19, 0x04	; 4
 36c:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 370:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 374:	09 c0       	rjmp	.+18     	; 0x388 <doReadCycle+0x208>
 376:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 37a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 37e:	3b 7f       	andi	r19, 0xFB	; 251
 380:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 384:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
			bitWrite(state, STATE_Y, GEN_2);
 388:	34 9b       	sbis	0x06, 4	; 6
 38a:	0a c0       	rjmp	.+20     	; 0x3a0 <doReadCycle+0x220>
 38c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 390:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 394:	32 60       	ori	r19, 0x02	; 2
 396:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 39a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 39e:	09 c0       	rjmp	.+18     	; 0x3b2 <doReadCycle+0x232>
 3a0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 3a4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 3a8:	3d 7f       	andi	r19, 0xFD	; 253
 3aa:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 3ae:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
			bitWrite(state, STATE_X, GEN_3);
 3b2:	33 9b       	sbis	0x06, 3	; 6
 3b4:	0a c0       	rjmp	.+20     	; 0x3ca <doReadCycle+0x24a>
 3b6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 3ba:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 3be:	31 60       	ori	r19, 0x01	; 1
 3c0:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 3c4:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 3c8:	09 c0       	rjmp	.+18     	; 0x3dc <doReadCycle+0x25c>
 3ca:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 3ce:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 3d2:	3e 7f       	andi	r19, 0xFE	; 254
 3d4:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 3d8:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
			bitWrite(state, STATE_MODE, GEN_4);
 3dc:	32 9b       	sbis	0x06, 2	; 6
 3de:	0a c0       	rjmp	.+20     	; 0x3f4 <doReadCycle+0x274>
 3e0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 3e4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 3e8:	38 60       	ori	r19, 0x08	; 8
 3ea:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 3ee:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 3f2:	08 95       	ret
 3f4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 3f8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 3fc:	37 7f       	andi	r19, 0xF7	; 247
 3fe:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 402:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 406:	08 95       	ret
		}
		else
		{
			state |= 0b0000111100000000;
 408:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 40c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 410:	9f 60       	ori	r25, 0x0F	; 15
 412:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 416:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
		case 8:
		lastReadTime = millis();
		break;
	}
	return true;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	08 95       	ret
		{
			state |= 0b0000111100000000;
		}
		break;
		case 8:
		lastReadTime = millis();
 41e:	0e 94 a5 02 	call	0x54a	; 0x54a <millis>
 422:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <lastReadTime>
 426:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <lastReadTime+0x1>
 42a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lastReadTime+0x2>
 42e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <lastReadTime+0x3>
		break;
	}
	return true;
 432:	81 e0       	ldi	r24, 0x01	; 1
			state |= 0b0000111100000000;
		}
		break;
		case 8:
		lastReadTime = millis();
		break;
 434:	08 95       	ret
	}
	return true;
 436:	81 e0       	ldi	r24, 0x01	; 1
}
 438:	08 95       	ret

0000043a <readController>:
	Performs one controller read.
	One controller read consists of 8 read cycles.
	See "https://segaretro.org/Six_Button_Control_Pad_(Mega_Drive)#Technical_information"
*/
void readController()
{
 43a:	cf 93       	push	r28
	for(uint8_t cycle = 1; cycle <= CYCLES_PER_READ; cycle++)
 43c:	c1 e0       	ldi	r28, 0x01	; 1
	{
		if(!doReadCycle(cycle))
 43e:	8c 2f       	mov	r24, r28
 440:	0e 94 c0 00 	call	0x180	; 0x180 <doReadCycle>
 444:	88 23       	and	r24, r24
 446:	19 f0       	breq	.+6      	; 0x44e <readController+0x14>
	One controller read consists of 8 read cycles.
	See "https://segaretro.org/Six_Button_Control_Pad_(Mega_Drive)#Technical_information"
*/
void readController()
{
	for(uint8_t cycle = 1; cycle <= CYCLES_PER_READ; cycle++)
 448:	cf 5f       	subi	r28, 0xFF	; 255
 44a:	c9 30       	cpi	r28, 0x09	; 9
 44c:	c1 f7       	brne	.-16     	; 0x43e <readController+0x4>
		if(!doReadCycle(cycle))
		{
			break;
		}
	}
}
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <main>:
		Initialize Ports
		PORTC is used for Inputs from Genesis controller and Genesis select pin as output
		PORT B is used for PCE mode output and PCE pad output pins. PB5 is used as input for Genesis Pin 9
		PORD is exclusively used for PCE pad output pins
	*/
	DDRC =  0x1;
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xDF;
 456:	8f ed       	ldi	r24, 0xDF	; 223
 458:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF;
 45a:	8f ef       	ldi	r24, 0xFF	; 255
 45c:	8a b9       	out	0x0a, r24	; 10
	
	PORTC = 0xFF;
 45e:	88 b9       	out	0x08, r24	; 8
	PORTB = 0xFF;
 460:	85 b9       	out	0x05, r24	; 5
	PORTD = 0xFF;
 462:	8b b9       	out	0x0b, r24	; 11

	//initialize Timer0
	initTimer();
 464:	0e 94 9b 02 	call	0x536	; 0x536 <initTimer>
	while (1)
	{
		if(millis() - lastReadTime > MS_DELAY)
 468:	0e 94 a5 02 	call	0x54a	; 0x54a <millis>
 46c:	00 91 03 01 	lds	r16, 0x0103	; 0x800103 <lastReadTime>
 470:	10 91 04 01 	lds	r17, 0x0104	; 0x800104 <lastReadTime+0x1>
 474:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <lastReadTime+0x2>
 478:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <lastReadTime+0x3>
 47c:	dc 01       	movw	r26, r24
 47e:	cb 01       	movw	r24, r22
 480:	80 1b       	sub	r24, r16
 482:	91 0b       	sbc	r25, r17
 484:	a2 0b       	sbc	r26, r18
 486:	b3 0b       	sbc	r27, r19
 488:	06 97       	sbiw	r24, 0x06	; 6
 48a:	a1 05       	cpc	r26, r1
 48c:	b1 05       	cpc	r27, r1
 48e:	60 f0       	brcs	.+24     	; 0x4a8 <main+0x56>
		{
			cli();
 490:	f8 94       	cli
			readController();
 492:	0e 94 1d 02 	call	0x43a	; 0x43a <readController>
			bitWrite(PORTB, PCE_MODE_AND_LED, sixButtonMode);
 496:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 49a:	88 23       	and	r24, r24
 49c:	11 f0       	breq	.+4      	; 0x4a2 <main+0x50>
 49e:	2c 9a       	sbi	0x05, 4	; 5
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <main+0x52>
 4a2:	2c 98       	cbi	0x05, 4	; 5
			setPCE();
 4a4:	0e 94 53 00 	call	0xa6	; 0xa6 <setPCE>
		}
		sei();
 4a8:	78 94       	sei
	}
 4aa:	de cf       	rjmp	.-68     	; 0x468 <main+0x16>

000004ac <__vector_16>:
 */ 

#include "millis.h"

ISR(TIMER0_OVF_vect)
{
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
 4b6:	2f 93       	push	r18
 4b8:	3f 93       	push	r19
 4ba:	4f 93       	push	r20
 4bc:	5f 93       	push	r21
 4be:	6f 93       	push	r22
 4c0:	8f 93       	push	r24
 4c2:	9f 93       	push	r25
 4c4:	af 93       	push	r26
 4c6:	bf 93       	push	r27
		// copy these to local variables so they can be stored in registers
		// (volatile variables must be read from memory on every access)
		unsigned long m = timer0_millis;
 4c8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <timer0_millis>
 4cc:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timer0_millis+0x1>
 4d0:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <timer0_millis+0x2>
 4d4:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <timer0_millis+0x3>
		unsigned int f = timer0_fract;
 4d8:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <timer0_fract>
 4dc:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <timer0_fract+0x1>
		m += MILLISECOND_INCREMENT;
		f += FRACT_INCREMENT;
 4e0:	9a 01       	movw	r18, r20
 4e2:	28 5e       	subi	r18, 0xE8	; 232
 4e4:	3f 4f       	sbci	r19, 0xFF	; 255
		//Once fraction is big enough to make up an entire millisecond we increment m by one and decrement f by 1000
		if(1000 <= f)
 4e6:	28 3e       	cpi	r18, 0xE8	; 232
 4e8:	63 e0       	ldi	r22, 0x03	; 3
 4ea:	36 07       	cpc	r19, r22
 4ec:	20 f4       	brcc	.+8      	; 0x4f6 <__vector_16+0x4a>
{
		// copy these to local variables so they can be stored in registers
		// (volatile variables must be read from memory on every access)
		unsigned long m = timer0_millis;
		unsigned int f = timer0_fract;
		m += MILLISECOND_INCREMENT;
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	a1 1d       	adc	r26, r1
 4f2:	b1 1d       	adc	r27, r1
 4f4:	06 c0       	rjmp	.+12     	; 0x502 <__vector_16+0x56>
		f += FRACT_INCREMENT;
		//Once fraction is big enough to make up an entire millisecond we increment m by one and decrement f by 1000
		if(1000 <= f)
		{
			m++;
 4f6:	02 96       	adiw	r24, 0x02	; 2
 4f8:	a1 1d       	adc	r26, r1
 4fa:	b1 1d       	adc	r27, r1
			f -= 1000;
 4fc:	9a 01       	movw	r18, r20
 4fe:	20 5d       	subi	r18, 0xD0	; 208
 500:	33 40       	sbci	r19, 0x03	; 3
		}
		timer0_millis = m;
 502:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <timer0_millis>
 506:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <timer0_millis+0x1>
 50a:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <timer0_millis+0x2>
 50e:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <timer0_millis+0x3>
		timer0_fract = f;
 512:	30 93 0c 01 	sts	0x010C, r19	; 0x80010c <timer0_fract+0x1>
 516:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <timer0_fract>
}
 51a:	bf 91       	pop	r27
 51c:	af 91       	pop	r26
 51e:	9f 91       	pop	r25
 520:	8f 91       	pop	r24
 522:	6f 91       	pop	r22
 524:	5f 91       	pop	r21
 526:	4f 91       	pop	r20
 528:	3f 91       	pop	r19
 52a:	2f 91       	pop	r18
 52c:	0f 90       	pop	r0
 52e:	0f be       	out	0x3f, r0	; 63
 530:	0f 90       	pop	r0
 532:	1f 90       	pop	r1
 534:	18 95       	reti

00000536 <initTimer>:

void initTimer()
{
	//Enable global interrupts
	sei();
 536:	78 94       	sei
	//Prescale by Clock / 64
	TCCR0B |= 1<<(CS01) | 1<<CS00;
 538:	85 b5       	in	r24, 0x25	; 37
 53a:	83 60       	ori	r24, 0x03	; 3
 53c:	85 bd       	out	0x25, r24	; 37
	//Timer/Counter0 Overflow interrupt enable
	TIMSK0  |= 1<<TOIE0;
 53e:	ee e6       	ldi	r30, 0x6E	; 110
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	81 60       	ori	r24, 0x01	; 1
 546:	80 83       	st	Z, r24
 548:	08 95       	ret

0000054a <millis>:
}

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 54a:	2f b7       	in	r18, 0x3f	; 63
	cli();
 54c:	f8 94       	cli
	m = timer0_millis;
 54e:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <timer0_millis>
 552:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <timer0_millis+0x1>
 556:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timer0_millis+0x2>
 55a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <timer0_millis+0x3>
	SREG = oldSREG;
 55e:	2f bf       	out	0x3f, r18	; 63
	return m;
 560:	08 95       	ret

00000562 <_exit>:
 562:	f8 94       	cli

00000564 <__stop_program>:
 564:	ff cf       	rjmp	.-2      	; 0x564 <__stop_program>
